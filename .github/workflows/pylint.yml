name: Generic Workflow

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
    paths:
      - '**.py'

jobs:
  pylint:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.10.4"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
         fetch-depth: 0

          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Debug Changed Files
        run: |
             git status
             git log -n 5 --oneline


      - name: List Changed Python Files
        id: list_changed_files
        run: |
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- '**.py')
          echo "::set-output name=changed_files::${changed_files}"

      - name: Run Pylint and Store Scores
  id: run_pylint
  run: |
    changed_files="${{ steps.list_changed_files.outputs.changed_files }}"
    threshold=0.8  # Set your desired threshold here
    pylint_fail=false

    # Initialize an empty array to store scores and file names
    declare -A scores

    for file in $changed_files; do
      pylint_score=$(pylint "$file" | grep 'Your code has been rated at' | awk '{print $7}' || echo "0")
      echo "Pylint score for $file: $pylint_score"

      # Store the score in the scores array using the file name as the key
      scores["$file"]=$pylint_score
    done

    # Create the report file and write the scores for all changed files
    report_file="pylint_overall_report.txt"
    echo "## EDR Linter and Formatter (Overall Report)" > "$report_file"
    echo "Branch: ${{ github.ref }}" >> "$report_file"
    echo "==========" >> "$report_file"
    echo "Commit chain:" >> "$report_file"
    git log -n 3 --pretty=format:"- %h %s" >> "$report_file"
    echo "" >> "$report_file"
    echo "==========" >> "$report_file"
    echo "Files changed in the latest commit:" >> "$report_file"
    for file in $changed_files; do
      echo "$file" >> "$report_file"
      # Include the Pylint score in the report
      echo "Pylint Score for $file: ${scores[$file]}" >> "$report_file"
    done
    echo "==========" >> "$report_file"
    echo "Author: ${{ github.actor }}" >> "$report_file"
    echo "Reviewer: ${{ github.actor }}" >> "$report_file"
    echo "Code Quality:" >> "$report_file"
    echo "    Benchmark: $threshold" >> "$report_file"

    # Determine overall check status based on the lowest score
    lowest_score=10  # Initialize to a high value
    for score in "${scores[@]}"; do
      if (( $(echo "$score < $lowest_score" | bc -l) )); then
        lowest_score=$score
      fi
    }
    if (( $(echo "$lowest_score < $threshold" | bc -l) )); then
      pylint_fail=true
    fi

    if [ "$pylint_fail" = true ]; then
      echo "    Check Status: Fail" >> "$report_file"
    else
      echo "    Check Status: Pass" >> "$report_file"
    fi

    echo "Markdown report created."
    echo "::set-output name=markdown_report::$report_file"


      - name: Upload Markdown Report
        uses: actions/upload-artifact@v2
        with:
          name: pylint-report
          path: pylint_overall_report.txt

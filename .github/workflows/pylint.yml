name: Generic Workflow

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
    paths:
      - '**.py'

jobs:
  pylint:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.10.4"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
         fetch-depth: 0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: List Changed Python Files
        id: list_changed_files
        run: |
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- '**.py')
          echo "::set-output name=changed_files::${changed_files}"

      - name: Run Pylint and Store Scores
        id: run_pylint
        run: |
          changed_files="${{ steps.list_changed_files.outputs.changed_files }}"
          threshold=0.8  # Set your desired threshold here

          if [ -n "$changed_files" ]; then
            pylint_fail=false
            report_text=""

            for file in $changed_files; do
              pylint_score=$(pylint "$file" | grep 'Your code has been rated at' | awk '{print $7}' || echo "0")
              echo "Pylint score for $file: $pylint_score"
              report_text+="\n    $file: $pylint_score/10"

              if (( $(echo "$pylint_score < $threshold" | bc -l) )); then
                echo "Pylint score for $file is below the threshold. Skipping."
                pylint_fail=true
              fi
            done

            echo "## EDR Linter and Formatter (Overall Report)"
            echo "Branch: ${{ github.ref }}"
            echo "=========="
            echo "Commit chain:"
            token=${{ secrets.ATF }}
            git log -n 3 --pretty=format:"- %h %s"
            echo ""
            echo "Files changed in the latest commit:"
            echo "$report_text"
            echo "=========="
            echo "Author: ${{ github.actor }}"
            echo "Reviewer: ${{ github.actor }}"
            echo "Code Quality:"
            echo "    Benchmark: 8"
            echo "    Lowest_Score: $pylint_score/10"
            if [ "$pylint_fail" = true ]; then
              echo "    Check Status: Fail"
            else
              echo "    Check Status: Pass"
            fi

            echo "Markdown report created."
            echo "::set-output name=markdown_report::pylint_report.txt"
          else
            echo "No Python files changed."
          fi


      - name: Upload Markdown Report
        uses: actions/upload-artifact@v2
        with:
          name: pylint-report
          path: pylint_report.txt

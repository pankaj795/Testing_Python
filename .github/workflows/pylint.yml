name: Generic Workflow

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
    paths:
      - '**/*.{js,jsx,ts,tsx,py}'

jobs:
  pylint:
    runs-on: ubuntu-22.04

    if: contains(github.event_name, 'push') && contains(github.event.head_commit.message, 'python')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python 3.10.4
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.4"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v9.2

      - name: Run Pylint and Store Scores
        id: run_pylint
        run: |
          changed_files="${{ steps.changed-files.outputs.all_modified_files }}"
          threshold=0.8
          pylint_fail=false
          declare -A scores
          for file in $changed_files; do
            pylint_score=$(pylint "$file" | grep 'Your code has been rated at' | awk '{print $7}' || echo "0")
            echo "Pylint score for $file: $pylint_score"
            scores["$file"]=$pylint_score
          done
          report_file="lint_reports/pylint_report.txt"
          echo "## EDR Linter and Formatter (Python Report)" > "$report_file"
          echo "Branch: ${{ github.ref }}" >> "$report_file"
          echo "==========" >> "$report_file"
          echo "Commit chain:" >> "$report_file"
          git log -n 3 --pretty=format:"- %h %s" >> "$report_file"
          echo "" >> "$report_file"
          echo "==========" >> "$report_file"
          echo "Files changed in the latest commit:" >> "$report_file"
          for file in $changed_files; do
            echo "$file" >> "$report_file"
            echo "Pylint Score for $file: ${scores[$file]}" >> "$report_file"
          done
          echo "==========" >> "$report_file"
          echo "Author: ${{ github.actor }}" >> "$report_file"
          echo "Reviewer: ${{ github.actor }}" >> "$report_file"
          echo "Code Quality:" >> "$report_file"
          lowest_score=1.0
          for score in "${scores[@]}"; do
            if (( $(echo "$score < $lowest_score" | bc -l) )); then
              lowest_score=$score
            fi
          done

          if (( $(echo "$lowest_score < $threshold" | bc -l) )); then
            pylint_fail=true
          fi

          if [ "$pylint_fail" = true ]; then
            echo "    Check Status: Fail" >> "$report_file"
          else
            echo "    Check Status: Pass" >> "$report_file"
          fi

          echo "Markdown report created."
          echo "::set-output name=markdown_report::$report_file"

  eslint:
    runs-on: ubuntu-22.04

    if: contains(github.event_name, 'push') && contains(github.event.head_commit.message, 'nodejs')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Install ESLint
        run: npm install eslint

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v9.2

      - name: Run ESLint and Store Scores
        id: run_eslint
        run: |
          changed_files="${{ steps.changed-files.outputs.all_modified_files }}"
          eslint_fail=false
          declare -A scores
          for file in $changed_files; do
            eslint_score=$(npx eslint "$file" --format=compact | awk '{print $2}' || echo "0")
            echo "ESLint score for $file: $eslint_score"
            scores["$file"]=$eslint_score
          done
          report_file="lint_reports/eslint_report.txt"
          echo "## Node.js Linter and Formatter (JavaScript Report)" > "$report_file"
          echo "Branch: ${{ github.ref }}" >> "$report_file"
          echo "==========" >> "$report_file"
          echo "Commit chain:" >> "$report_file"
          git log -n 3 --pretty=format:"- %h %s" >> "$report_file"
          echo "" >> "$report_file"
          echo "==========" >> "$report_file"
          echo "Files changed in the latest commit:" >> "$report_file"
          for file in $changed_files; do
            echo "$file" >> "$report_file"
            echo "ESLint Score for $file: ${scores[$file]}" >> "$report_file"
          done
          echo "==========" >> "$report_file"
          echo "Author: ${{ github.actor }}" >> "$report_file"
          echo "Reviewer: ${{ github.actor }}" >> "$report_file"
          echo "Code Quality:" >> "$report_file"
          lowest_score=1.0
          for score in "${scores[@]}"; do
            if (( $(echo "$score < $lowest_score" | bc -l) )); then
              lowest_score=$score
            fi
          done

          # Adjust threshold as needed
          threshold=0.8
          if (( $(echo "$lowest_score < $threshold" | bc -l) )); then
            eslint_fail=true
          fi

          if [ "$eslint_fail" = true ]; then
            echo "    Check Status: Fail" >> "$report_file"
          else
            echo "    Check Status: Pass" >> "$report_file"
          fi

          echo "Markdown report created."
          echo "::set-output name=markdown_report::$report_file"

      - name: Upload Markdown Report
        uses: actions/upload-artifact@v3
        with:
          name: eslint-report
          path: lint_reports/eslint_report.txt

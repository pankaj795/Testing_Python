name: Pylint Check

on:
  push:
    paths:
      - '**.py'

jobs:
  pylint_check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: List Changed Python Files
        id: list_changed_files
        run: |
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- '**.py')
          echo "::set-output name=changed_files::${changed_files}"

      - name: Run Pylint and Store Scores
        id: run_pylint
        run: |
          changed_files="${{ steps.list_changed_files.outputs.changed_files }}"
          threshold=0.8
          pylint_fail=false
          report_file="pylint_report.txt"
          scores=()

          if [ -n "$changed_files" ]; then
            for file in $changed_files; do
              pylint_score=$(pylint "$file" | grep 'Your code has been rated at' | awk '{print $7}' || echo "0")
              echo "Pylint score for $file: $pylint_score"

              if (( $(echo "$pylint_score >= $threshold" | bc -l) )); then
                echo "Pylint score meets or exceeds the threshold for $file."
              else
                echo "Pylint score for $file is below the threshold. Skipping."
                pylint_fail=true
              }

              # Add the score to the array
              scores+=("$file: $pylint_score")
            done

            if [ "$pylint_fail" = true ]; then
              echo "At least one file has a Pylint score below the threshold. Aborting the workflow."
            else
              echo "All files meet or exceed the threshold. Committing and pushing to GitHub."
              # Add and commit all changed Python files
              token=${{ secrets.ATF }}
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              branch_name="${{ github.ref }}"
              branch_name="${branch_name#refs/heads/}"
              git add $changed_files
  
              git push origin ${{ github.ref }}
            fi
          else
            echo "No Python files changed."
          fi

          # Create the report including all scores
          echo "## EDR Linter and Formatter" > "$report_file"
          echo "Branch: ${{ github.ref }}" >> "$report_file"
          echo "==========" >> "$report_file"
          echo "Commit chain:" >> "$report_file"
          git log -n 3 --pretty=format:"- %h %s" >> "$report_file"
          echo "" >> "$report_file"
          echo "==========" >> "$report_file"
          echo "Files changed in the latest commit:" >> "$report_file"
          cat "$changed_files" >> "$report_file"
          echo "==========" >> "$report_file"
          echo "Author: ${{ github.actor }}" >> "$report_file"
          echo "Reviewer: ${{ github.actor }}" >> "$report_file"
          echo "Code Quality:" >> "$report_file"
          echo "Benchmark: $threshold" >> "$report_file"
          echo "Scores:" >> "$report_file"
          for score in "${scores[@]}"; do
            echo "    $score" >> "$report_file"
          done

          echo "Markdown report created."

      - name: Upload Markdown Report
        uses: actions/upload-artifact@v2
        with:
          name: pylint-report
          path: pylint_report.txt

name: Generic Workflow

on:
  push:
    branches:
      - '*'
    tags:
      - '*' 
    paths:
      - '**.py'

jobs:
  pylint:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.10.4"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2  # Use v2 for better compatibility

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2  # Use v2 for better compatibility
        with:
          python-version: ${{ matrix.python-version }}
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
         fetch-depth: 0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
      - name: List Changed Python Files
        id: list_changed_files
        run: |
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- '**.py')
          echo "::set-output name=changed_files::${changed_files}"
      - name: Run Pylint and Store Score
        id: run_pylint
        run: |
          changed_files="${{ steps.list_changed_files.outputs.changed_files }}"
          threshold=0.8  # Set your desired threshold here
          if [ -n "$changed_files" ]; then
            pylint_fail=false
            for file in $changed_files; do
              
              pylint_score=$(pylint "$file" | grep 'Your code has been rated at' | awk '{print $7}' || echo "0")
              echo "Pylint score for $file: $pylint_score"
              if (( $(echo "$pylint_score >= $threshold" | bc -l) )); then
                 echo "Pylint score meets or exceeds the threshold for $file. Committing and pushing to GitHub."
                 # Create a report file with the Pylint score
                 report_file="${file}_pylint_report.txt"
                 
                 echo "Pylint Score: $pylint_score" > "$report_file"
                # Perform the Git commit and push here
                 token=${{ secrets.ATF }}
                 git config user.name "GitHub Actions"
                 git config user.email "actions@github.com"
                 git add "$file"
                 branch_name="${{ github.ref }}"
                 branch_name="${branch_name#refs/heads/}"
                 git diff --cached --name-only --diff-filter=AM | while read -r changed_file
                 change_summary=$(git diff --cached --name-only --diff-filter=AM --stat "$changed_file" | tail -1)
                 commit_message="Auto-fix Pylint issues in $changed_file: $change_summary"
                 git commit -m "$commit_message"
                 git push --force origin $branch_name 
                 echo "Committed and pushed to GitHub."
              else
                 echo "Pylint score for $file is below the threshold. Skipping."
                 pylint_fail=true
                 # Create a report file with the Pylint score
                 report_file="${file}_pylint_report.txt"
                 echo "Pylint Score: $pylint_score" >> "$report_file"
                 
                 
                 
                 
              fi
            done
      
            if [ "$pylint_fail" = true ]; then
              echo "At least one file has a Pylint score below the threshold. Aborting the workflow."
              
            fi
          else
            echo "No Python files changed."
          fi
          
          message="The threshold Value set for the code is :i.e 8/10"
          echo "$message" > pylint_report.txt
          echo "## Pylint Score: $pylint_score" >> pylint_report.txt
          git log -1 --pretty=format:"Last Commit: %h %s" >> pylint_report.txt
          echo >> pylint_report.txt 
          echo "Commit SHA: ${{ github.sha }}" >> pylint_report.txt
          echo "Branch: ${{ github.ref }}" >> pylint_report.txt
          echo "Author: ${{ github.actor }}" >> pylint_report.txt
          echo "Reviewer: ${{ github.actor }}" >> pylint_report.txt
          if [ "$pylint_fail" = true ]; then
              echo "Pylint score for $file is below the threshold.Code Failed !!!!" >> pylint_report.txt
          fi
          
          
          echo "Markdown report created."
          echo "::set-output name=markdown_report::pylint_report.txt"
      - name: Upload Markdown Report
        uses: actions/upload-artifact@v2
        with:
          name: pylint-report
          path: pylint_report.txt 

      - name: Check Upload Failure
        if: steps.run_pylint.outputs.upload_failed == 'true' && steps.run_pylint.outputs.pylint_fail == 'true'
        run: |
            echo "The code failed to upload." >> pylint_report.txt
     

name: Pylint Workflow

on:
  push:
    branches:
      - devops_code  # Change this to your main branch name if it's different
    paths:
      - '**.py'

jobs:
  pylint:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.10.4"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2  # Use v2 for better compatibility

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2  # Use v2 for better compatibility
        with:
          python-version: ${{ matrix.python-version }}
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
         fetch-depth: 0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: List Changed Python Files
        id: list_changed_files
        run: |
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- '**.py')
          echo "::set-output name=changed_files::${changed_files}"

      - name: Run Pylint and Store Score
        id: run_pylint
        run: |
          changed_files="${{ steps.list_changed_files.outputs.changed_files }}"
          threshold=0.873  # Set your desired threshold here

          if [ -n "$changed_files" ]; then
            pylint_fail=false

            for file in $changed_files; do
              pylint_score=$(pylint "$file" | grep 'Your code has been rated at' | awk '{print $7}' || echo "0")
              echo "Pylint score for $file: $pylint_score"

              if (( $(echo "$pylint_score >= $threshold" | bc -l) )); then
                echo "Pylint score meets or exceeds the threshold for $file. Committing and pushing to GitHub."
                # Perform the Git commit and push here
                token=${{ secrets.TOKEN }}
                git config user.name "GitHub Actions"
                git config user.email "actions@github.com"
                git add "$file"
                git commit -m "Pylint report update for $file"
                git push --force origin devops_code
                echo "Committed and pushed to GitHub."
              else
                echo "Pylint score for $file is below the threshold. Skipping."
                pylint_fail=true
              fi
            done

            if [ "$pylint_fail" = true ]; then
              echo "At least one file has a Pylint score below the threshold. Aborting the workflow."
              exit 1
            fi
          else
            echo "No Python files changed."
          fi
